MAIN CODE ON MICROPROCESSOR
---------------------------------------------------------------------------------------
Set up acces point
Lock stepper motor (move one step with stepper library)
WHILE True
	WHILE client connected
		READ wifi input
		Decode wifi input
		IF wifi input indicates sensor mode
			flyWheelSpeed = Decode RPM part of wifi input
			flywheelSpeedControl(flyWheelSpeed)
			k1, k2 = Decode corrector coefficients from wifi input
			WHILE no bytes on buffer 
				readValue = READ analog channel
				angleValue = readvalue*k1+k2
				SEND angleValue
			WRITE LOW on digital pin connected to motor driver enable pin
			Detach flywheel interrupts
			
		ELSE IF wifi input indicates calibration mode
			flyWheelSpeed = Decode RPM part of wifi input
			flywheelSpeedControl(flyWheelSpeed)
			sensorValue=READ MEMS sensor
			readValue = READ analog channel
			SEND sensorValue and readValue
			WRITE LOW on digital pin connected to motor driver enable pin
			Detach flywheel interrupts
			
		ELSE IF wifi input indicates actuation mode
			flyWheelSpeed = Decode RPM part of wifi input
			flywheelSpeedControl(flyWheelSpeed)
			Decode required torque part of wifi input
			currentPos = 63
			WHILE currentServoPos < servoBoundary
				servoSpeed = calculateServoSpeed(flyWheelSpeed, currentPos, requiredTorque)
				prevServoPos = currentPos
				WHILE currentPos < (prevServoPos + 3)
					currentPos += 1
					drive servo to currentPos degrees
					WAIT tServo / servoSpeed ms
			drive servo to 90 degrees with slow speed
			WRITE LOW on digital pin connected to motor driver enable pin
			Detach flywheel interrupts
			
		ELSE IF wifi input indicates stabilisation mode
			flyWheelSpeed = Decode RPM part of wifi input
			flywheelSpeedControl(flyWheelSpeed)
			Decode corrector coefficients from wifi input
			stepperInterrupSet = False
			WHILE no bytes on buffer 
				readValue = READ analog channel
				angleValue = readValue*k1+k2
				stepPositionControl(angleValue)
			WRITE LOW on digital pin connected to motor driver enable pin
			Detach flywheel and stepper interrupts
			Lock stepper motor (move one step with stepper library)
---------------------------------------------------------------------------------------
END OF MAIN CODE ON MICROPROCESSOR


flywheelSpeedControl(wantedSpeed) FUNCTION
---------------------------------------------------------------------------------------
attach interrupt to Hall Effect sensor pin each time that pin READs HIGH
	c+=1
WRITE driver enable pin to HIGH
PWM = 0
errorSpeedSum = 0
attach time interrupt for every t seconds
	curSpeed = c * 60 / (magnetNumber * t)
	errorSpeed =  wantedSpeed - curSpeed
	PWM = errorSpeed*kp + errorSpeedSum*ki + (errorSpeed - errorSpeedPre)*kd
	errorSpeedPre = errorSpeed
	errorSpeedSum += errorSpeed
	IF errorSpeedSum >4000
		errorSpeedSum = 4000
	IF errorSpeedSum <-4000
		errorSpeedSum = -4000
	IF PWM > 255
		PWM = 255
	WRITE PWM on DC motor driver pin
	c = 0
---------------------------------------------------------------------------------------
END OF flywheelSpeedControl(wantedSpeed) FUNCTION


stepPositionControl(theta_measured) FUNCTION
---------------------------------------------------------------------------------------
IF NOT stepperInterruptSet
	attach time interrupt for every t1 seconds (t is smaller than a second)
		timer += t1
	stepperInterruptSet = True
theta_total_1 = theta_const + theta_measured
del_s_1 = sqrt(l_const^2 + l_arm^2 - 2*l_const*l_arm*cos(theta_total_1))-l_used
F_s_1 = k_system * del_s_1
sin_s_1 = (l_const*sin(theta_total_1) ) / (l_used + del_s_1)
T_s_1=F_s_1*sin_s_1*l_arm
theta_total_2 = theta_const - theta_measured
del_s_2 = sqrt(l_const^2 + l_arm^2 - 2*l_const*l_arm*cos(theta_total_2))-l_used
IF del_s_2 >0
	F_s_2 = k_system * del_s_2
ELSE 
	F_s_2 = 0
sin_s_2 = (l_const*sin(theta_total_2) ) / (l_used + del_s_2)
T_s_2=F_s_2*sin_s_2*l_arm
T_calculated=T_s_1 - T_s_2
H = I_flywheel * curSpeed * pi / 30
angularSpeed = moment / H * cos (theta_measured)
curAngle = angularSpeed * timer
timer = 0
errorAngle =  -curAngle
angle2drive = errorAngle*kp + errorAngleSum*ki + (errorAngle - errorAnglePre)*kd
errorAnglePre = errorAngle
errorAngleSum += errorAngle
IF errorAngleSum >4000
	errorSpeedSum = 4000
IF errorAngleSum <-4000
	errorSpeedSum = -4000
Drive stepper motor (move stepPerRev / 360 * Angle steps)
---------------------------------------------------------------------------------------
END OF stepPositionControl(sensorAngle) FUNCTION
