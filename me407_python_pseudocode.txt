MAIN CODE ON PYTHON GUI
---------------------------------------------------------------------------------------
Initialize GUI
WHILE True
	IF NOT connected to server
		connect to server
	WHILE connected to server
		IF sensor button is pressed
			IF sensorThread exists
				KILL sensorThread
			IF values in RPM and coefficient textboxes are in acceptable intervals
				encode and send sensor flywheel speed and coefficient to server
				START sensorThread
					WHILE STOP button is NOT pressed
						receive angle data from server
						calculatedAngularSpeed = calculateAngularSpeed(RPM, angleData)
						log sensor data and calculatedAngularSpeed
						show sensor data and calculatedAngularSpeed
					plot sensor data and calculatedAngularSpeed
			ELSE
				set Warning textbox to "Missing/Incorrect information"

		ELSE IF calibration button is pressed
			IF sensorThread exists
				KILL sensorThread
			IF value in RPM textbox is in acceptable interval
				encode and send calibration mode and sensor flywheel speed to server
				receive sensor and angle data from server
				correctorCoefficient = calculateCoefficient(RPM, sensorData, angleData)
				fill the textbox with correctorCoefficient
			ELSE
				set Warning textbox to "Missing/Incorrect information"

		ELSE IF actuator button is pressed
			IF sensorThread exists
				KILL sensorThread
			IF values in RPM and required torque textboxes are in acceptable intervals
				encode and send actuator mode, required torque and RPM to server
			ELSE
				set Warning textbox to "Missing/Incorrect information"
		
		ELSE IF stabilisation button is pressed
			IF values in RPM and coefficient textboxes are in acceptable intervals
				encode and send sensor flywheel speed and coefficient to server
			ELSE
				set Warning textbox to "Missing/Incorrect information"
---------------------------------------------------------------------------------------
END OF MAIN CODE ON PYTHON GUI


calculateAngularSpeed(curSpeed, theta_measured) FUNCTION
---------------------------------------------------------------------------------------
curSpeed *= pi / 30
theta_total_1 = theta_const + theta_measured
del_s_1 = sqrt(l_const^2 + l_arm^2 - 2*l_const*l_arm*cos(theta_total_1))-l_used
F_s_1 = k_system * del_s_1
sin_s_1 = (l_const*sin(theta_total_1) ) / (l_used + del_s_1)
T_s_1=F_s_1*sin_s_1*l_arm
theta_total_2 = theta_const - theta_measured
del_s_2 = sqrt(l_const^2 + l_arm^2 - 2*l_const*l_arm*cos(theta_total_2))-l_used
IF del_s_2 >0
	F_s_2 = k_system * del_s_2
ELSE 
	F_s_2 = 0
sin_s_2 = (l_const*sin(theta_total_2) ) / (l_used + del_s_2)
T_s_2=F_s_2*sin_s_2*l_arm
T_calculated=T_s_1 - T_s_2
H = I_flywheel * curSpeed * pi / 30
angularSpeed = moment / H * cos (theta_measured)
return angularSpeed
---------------------------------------------------------------------------------------
END OF calculateAngularSpeed(curSpeed, theta_measured) FUNCTION


calculateCoefficient(curSpeed, sensorData, angleData) FUNCTION
---------------------------------------------------------------------------------------
angSpeed = calculateAngularSpeed(curSpeed, angleData)
coeff = sensorData / angSpeed
return coeff
---------------------------------------------------------------------------------------
END OF calculateCoefficient(curSpeed, sensorData, angleData) FUNCTION
